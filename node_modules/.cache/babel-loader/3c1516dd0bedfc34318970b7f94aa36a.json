{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adhi0\\\\Notes-ReactJS\\\\src\\\\components\\\\Content.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Input from \"./Input\";\nimport { handleClick } from \"./Alert\";\nimport { useNavigate } from 'react-router-dom';\nimport { getInitialData } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Content = _ref => {\n  _s();\n\n  let {\n    setNotes\n  } = _ref;\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [data, setData] = useState(getInitialData());\n  const navigate = useNavigate();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (!title || !body) {\n      handleClick({\n        title: \"Error\",\n        text: \"Titles and Notes are Required!\",\n        icon: \"error\"\n      });\n      return;\n    } // Find the maximum ID in the current data\n\n\n    const maxId = Math.max(...data.map(note => note.id), 0); // Increment the maximum ID by 1 to generate a new unique ID\n\n    const newId = maxId + 1;\n    const date = new Date().toISOString();\n    const note = {\n      id: newId,\n      title,\n      body,\n      archived: false,\n      createdAt: date\n    };\n    setNotes(prevNotes => [...prevNotes, note]);\n    setTitle(\"\");\n    setBody(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"New Notes\\u270F\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"note-input__title__char-limit\",\n        children: [\"Characters left : \", 50 - title.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: title,\n        onChange: setTitle,\n        name: \"title\",\n        type: \"text\",\n        placeholder: \"\\u2712\\uFE0FTitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: body,\n        onChange: setBody,\n        name: \"body\",\n        type: \"textarea\",\n        placeholder: \"\\u270D\\uFE0FWrite the notes here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"create-btn\",\n        onClick: () => handleClick({\n          title: \"Success Create Note\",\n          text: `Note \"${title}\" has been created`,\n          icon: \"success\"\n        }, setTimeout(() => {\n          navigate('/home');\n        }, 100)),\n        children: \"\\uD83D\\uDCE4Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Content, \"nc1XHdXbXOguH+4SzwV5PYZNkuM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["C:/Users/adhi0/Notes-ReactJS/src/components/Content.jsx"],"names":["React","useState","Input","handleClick","useNavigate","getInitialData","Content","setNotes","title","setTitle","body","setBody","data","setData","navigate","handleSubmit","event","preventDefault","text","icon","maxId","Math","max","map","note","id","newId","date","Date","toISOString","archived","createdAt","prevNotes","length","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Input from \"./Input\";\r\nimport { handleClick } from \"./Alert\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getInitialData } from \"../utils\";\r\n\r\nconst Content = ({ setNotes }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\nconst [data, setData] = useState(getInitialData())\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!title || !body) {\r\n      handleClick({\r\n        title: \"Error\",\r\n        text: \"Titles and Notes are Required!\",\r\n        icon: \"error\",\r\n      });\r\n      return;\r\n    }\r\n\r\n // Find the maximum ID in the current data\r\n const maxId = Math.max(...data.map((note) => note.id), 0);\r\n\r\n // Increment the maximum ID by 1 to generate a new unique ID\r\n  const newId = maxId + 1;\r\n    const date = new Date().toISOString();\r\n    const note = { id: newId, title, body, archived: false, createdAt: date };\r\n\r\n    \r\n    setNotes((prevNotes) => [...prevNotes, note]);\r\n    setTitle(\"\");\r\n    setBody(\"\");\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"note-input\">\r\n      <h1>New Notes✏️</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <p className=\"note-input__title__char-limit\">\r\n          Characters left : {50 - title.length}\r\n        </p>\r\n        <Input\r\n          value={title}\r\n          onChange={setTitle}\r\n          name=\"title\"\r\n          type=\"text\"\r\n          placeholder=\"✒️Title\"\r\n        />\r\n        <Input\r\n          value={body}\r\n          onChange={setBody}\r\n          name=\"body\"\r\n          type=\"textarea\"\r\n          placeholder=\"✍️Write the notes here\"\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"create-btn\"\r\n          onClick={() =>\r\n            handleClick({\r\n              title: \"Success Create Note\",\r\n              text: `Note \"${title}\" has been created`,\r\n              icon: \"success\",\r\n            },\r\n            setTimeout(() => {\r\n              navigate('/home');\r\n            }, 100)\r\n            )}\r\n        >\r\n          📤Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n"]},"metadata":{},"sourceType":"module"}